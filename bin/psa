#!/usr/bin/env ruby

begin
    require 'psadmin_plus'
rescue LoadError
    # running directly, not through gem install
    require_relative '../lib/psadmin_plus.rb'
end

# options
opts_c   = ARGV.shift || "help"
opts_t   = ARGV.shift || "all"
opts_d   = ARGV.shift || "all"
# Set remaining arguments as environment variables
ARGV.each do |arg|
    if arg.include? "="
        var = arg.split('=')
        ENV[var[0]]=var[1]
        puts "Setting environment variable " + var[0] + "=" + var[1]
    else
        # puts "Skip argument, no valid environment variable found."
    end
end

commands = opts_c.split(',')
types = opts_t.split(',')
domains = opts_d.split(',')

if types.include? "all" then types = ['app','prcs','web'] end
if domains.include? "all" then all_domains = true end

# setup environment
PS_PSA_CONF = ENV['PS_PSA_CONF'] || "#{ENV['HOME']}/.psa.conf"
if File.exists?(PS_PSA_CONF) then
    File.readlines(PS_PSA_CONF).each do |line|
        if line.start_with? "#" then
            next 
        else
            key, value = line.split "="
            value.nil? ? next : ENV[key] = value.strip
        end
    end
end

psa = Psadmin_plus.psa

# constants
OS_CONST            = psa.os
PS_RUNTIME_USER     = ENV['PS_RUNTIME_USER'] || "psadm2"
PS_HOOK_INTERP      = ENV['PS_HOOK_INTERP'] || "ruby"
PS_HOOK_PRE         = ENV['PS_HOOK_PRE'] || "false"
PS_HOOK_POST        = ENV['PS_HOOK_POST'] || "false"
PS_HOOK_START       = ENV['PS_HOOK_START'] || "false"
PS_HOOK_STOP        = ENV['PS_HOOK_STOP'] || "false"
PS_PSA_SUDO         = ENV['PS_PSA_SUDO'] || "on"
PS_PSADMIN_PATH     = "#{OS_CONST}" == "linux" ? "#{env('PS_HOME')}/bin" : "cmd /c #{env('PS_HOME')}/appserv"
PS_WIN_SERVICES     = ENV['PS_WIN_SERVICES'] || "false"
PS_TRAIL_SERVICE    = ENV['PS_TRAIL_SERVICE'] || "false"
PS_MULTI_HOME       = ENV['PS_MULTI_HOME'] || "false"
PS_MULTI_DELIMIT    = ENV['PS_MULTI_DELIMIT'] || "/"
PS_MULTI_PREFIX     = ENV['PS_MULTI_PREFIX'].to_i || 0
PS_PARALLEL_BOOT    = ENV['PS_PARALLEL_BOOT'] || "false"
PS_PSA_DEBUG        = ENV['PS_PSA_DEBUG']  || "INFO"
PS_PSA_TIMESTAMP    = ENV['PS_PSA_TIMESTAMP'] || "false"

# validation
# check runtime user
if "#{OS_CONST}" == "linux" then
    if !system("id #{PS_RUNTIME_USER} &> /dev/null") then
	puts "#{PS_RUNTIME_USER} is not valid. Please correct PS_RUNTIME_USER, then try again."
        exit
    end
else
    # windows - TODO
end

# process
commands.each do |c|
    case "#{c}"
    when "help"
        do_help
    when "admin"
        do_admin
    when "util"
        do_util
    when "list"
        do_list
    when "summary"
        do_summary
    else
        types.each do |t|
            # find valid domains for this type
            case "#{t}"
            when "app"
                valid_domains = find_apps
            when "tux"
                valid_domains = find_apps
            when "pubsub"
                valid_domains = find_apps # TODO - find only apps with PUBSUB enabled?
            when "prcs"
                valid_domains = find_prcss
            when "web"
                valid_domains = find_webs
            end

            if all_domains then
                domains = valid_domains
            end

            domains.each do |d|
                # validate domain for current type
                if valid_domains.include? d
                    do_hookpre(c,t,d)
                    do_set_cfg_home(d)

                    case "#{c}"
                    when "status"
                        do_cmd_banner(c,t,d)
                        do_status(t,d)
                    when "start"
                        do_cmd_banner(c,t,d)
                        do_start(t,d)
                    when "stop"
                        do_cmd_banner(c,t,d)
                        do_stop(t,d)
                    when "kill"
                        do_cmd_banner(c,t,d)
                        do_kill(t,d)
                    when "configure"
                        do_cmd_banner(c,t,d)
                        do_configure(t,d)
                    when "reconfigure"
                        do_cmd_banner(c,t,d)
                        do_reconfigure(t,d)
                    when "purge"
                        do_cmd_banner(c,t,d)
                        do_purge(t,d)
                    when "flush"
                        do_cmd_banner(c,t,d)
                        do_flush(t,d)
                    when "restart"
                        do_cmd_banner(c,t,d)
                        do_restart(t,d)
                    when "bounce"
                        do_cmd_banner(c,t,d)
                        do_bounce(t,d)
                    else
                        puts "Not a valid command. See psa help"
                    end  

                    do_hookpost(c,t,d)
                else
                    if ENV['PS_PSA_DEBUG'] == "true" 
                        do_cmd_banner(c,t,d)
                        puts "No valid domain found for this type."
                    end
                end
            end
        end
    end
end
