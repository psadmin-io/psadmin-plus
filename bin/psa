#!/usr/bin/env ruby

require 'psadmin_plus'
#require_relative '../lib/psadmin_plus.rb'

# options
opts_c = ARGV.shift || "help"
opts_t = ARGV.shift || "all"
opts_d = ARGV.shift || "all"

commands = opts_c.split(',')
types = opts_t.split(',')
domains = opts_d.split(',')

if types.include? "all" then types = ['app','prcs','web'] end
if domains.include? "all" then all_domains = true end

# setup environment
PS_PSA_CONF = ENV['PS_PSA_CONF'] || "#{ENV['HOME']}/.psa.conf"
if File.exists?(PS_PSA_CONF) then
    File.readlines(PS_PSA_CONF).each do |line|
        if line.start_with? "#" then
            next 
        else
            key, value = line.split "="
            ENV[key] = value.strip
        end
    end
end

# constants
OS_CONST = os
PS_RUNTIME_USER = ENV['PS_RUNTIME_USER'] || "psadm2"
PS_POOL_MGMT = ENV['PS_POOL_MGMT'] || "on"
PS_HEALTH_FILE = ENV['PS_HEALTH_FILE'] || "health.html"
PS_HEALTH_TIME = ENV['PS_HEALTH_TIME'] || "60"
PS_PSA_SUDO = ENV['PS_PSA_SUDO'] || "on"
PS_PSADMIN_PATH = "#{OS_CONST}" == "linux" ? "#{env('PS_HOME')}/bin" : "cmd /c #{env('PS_HOME')}/appserv"

# process
commands.each do |c|
    case "#{c}"
    when "help"
        do_help
    when "admin"
        do_admin
    when "util"
        do_util
    when "list"
        do_list
    when "summary"
        do_summary
    else
        types.each do |t|
            if all_domains then
                case "#{t}"
                when "app"
                    domains = find_apps
                when "prcs"
                    domains = find_prcss
                when "web"
                    domains = find_webs
                end
            end
            domains.each do |d|
                do_cmd_banner(c,t,d)
                case "#{c}"
                when "status"
                    do_status(t,d)
                when "start"
                    do_start(t,d)
                when "stop"
                    do_stop(t,d)
                when "kill"
                    do_kill(t,d)
                when "configure"
                    do_configure(t,d)
                when "purge"
                    do_purge(t,d)
                when "flush"
                    do_flush(t,d)
                when "restart"
                    do_restart(t,d)
                when "bounce"
                    do_bounce(t,d)
                when "pooladd"
                    do_pooladd(t,d)
                when "poolrm"
                    do_poolrm(t,d)
                else
                    puts "Not a valid command. See psa help"
                end
            end
        end
    end
end
