#!/bin/bash

#--------------------------------------------#
# psadmin-plus                               #
# https://github.com/psadmin-io/psadmin-plus #
#--------------------------------------------#
# set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
##########################
# Actions
##########################
    
function action_app
{
    if [ $domparam = "all" ] ; then
        list=("${app_doms[@]}")
    else
        list=($domparam)
    fi
    
    for dom in "${list[@]}"
    do
        act_type=app
        print_action_info
        case $act in

        status)
            exec_cmd "psadmin -c sstatus -d $dom" 2>&1
            exec_cmd "psadmin -c cstatus -d $dom" 2>&1
            exec_cmd "psadmin -c qstatus -d $dom" 2>&1
            exec_cmd "psadmin -c pslist -d $dom" 2>&1
        ;;

        start)
            exec_cmd "psadmin -c boot -d $dom" 2>&1
        ;;

        stop)
            exec_cmd "psadmin -c shutdown -d $dom" 2>&1
        ;;

        kill)
            exec_cmd "psadmin -c shutdown! -d $dom" 2>&1
        ;;

        configure)
            exec_cmd "psadmin -c configure -d $dom" 2>&1
        ;;

        purge)    
            exec_cmd "psadmin -c purge -d $dom" 2>&1
            echo "$domain cache purged."
        ;;

        flush)
            exec_cmd "psadmin -c cleanipc -d $dom" 2>&1
        ;;

        restart)
            exec_cmd "psadmin -c shutdown -d $dom" 2>&1
            exec_cmd "psadmin -c boot -d $dom" 2>&1
        ;;

        bounce)
            exec_cmd "psadmin -c shutdown -d $dom" 2>&1
            exec_cmd "psadmin -c cleanipc -d $dom" 2>&1
            exec_cmd "psadmin -c purge -d $dom" 2>&1
            exec_cmd "psadmin -c configure -d $dom" 2>&1
            exec_cmd "psadmin -c boot -d $dom" 2>&1
        ;;

        esac
    done    
    echo ""
}

function action_prcs
{
    if [ $domparam = "all" ] ; then
        list=("${prcs_doms[@]}")
    else
        list=($domparam)
    fi
    
    for dom in "${list[@]}"
    do
        act_type=prcs
        print_action_info
        case $act in

        status)
            exec_cmd "psadmin -p status -d $dom" 2>&1
        ;;

        start)
            exec_cmd "psadmin -p start -d $dom" 2>&1
        ;;

        stop)
            exec_cmd "psadmin -p stop -d $dom" 2>&1
        ;;

        kill)
            exec_cmd "psadmin -p kill -d $dom" 2>&1
        ;;

        configure)
            exec_cmd "psadmin -p configure -d $dom" 2>&1
        ;;

        flush)
            exec_cmd "psadmin -p cleanipc -d $dom" 2>&1
        ;;

        restart)
            exec_cmd "psadmin -p stop -d $dom" 2>&1
            exec_cmd "psadmin -p start -d $dom" 2>&1
        ;;

        bounce)
            exec_cmd "psadmin -p stop -d $dom" 2>&1
            exec_cmd "psadmin -p cleanipc -d $dom" 2>&1
            exec_cmd "psadmin -p configure -d $dom" 2>&1
            exec_cmd "psadmin -p start -d $dom" 2>&1
        ;;

    #    compile)
    #        if [[ -f $PS_HOME/setup/pscbl.mak ]]; then
    #            echo "Recompiling COBOL"
    #            cd "$PS_HOME"/setup && ./pscbl.mak
    #            cd "$PS_HOME"/setup && ./pscbl.mak
    #        else
    #            echoerror "Could not find the file $PS_HOME/setup/pscbl.mak"
    #            exit 1
    #        fi
    #    ;;

    #    link)
    #        if [[ -f $PS_HOME/setup/psrun.mak ]]; then
    #            echo "Linking COBOL"
    #            cd "$PS_HOME"/setup && ./psrun.mak
    #        else
    #            echoerror "Could not find the file $PS_HOME/setup/psrun.mak"
    #            exit 1
    #        fi
    #    ;;

        esac
    done
}

function action_web
{	
    if [ $domparam = "all" ] ; then
        list=("${web_doms[@]}")
    else
        list=($domparam)
    fi
    
    for dom in "${list[@]}"
    do
        act_type=web
        print_action_info
        case $act in
            status)
                echo "Webserver status $dom"
                exec_cmd "psadmin -w status -d $dom"
            ;;
            start)
                echo "Starting webserver"
                exec_cmd "psadmin -w start -d $dom"
            ;;
            stop)
                echo "Stopping webserver"
                exec_cmd "psadmin -w shutdown -d $dom"
            ;;
            purge)
                echo "Purging webserver cache"
              exec_cmd "rm -rf \$PS_CFG_HOME/webserv/$dom/applications/peoplesoft/PORTAL*/*/cache*/"
            ;;
            restart)
                echo "Stopping webserver"
                exec_cmd "psadmin -w shutdown -d $dom"
                echo "Starting webserver"
                exec_cmd "psadmin -w start -d $dom"
            ;;
            bounce)
                echo "Stopping webserver"
                exec_cmd "psadmin -w shutdown -d $dom"
                echo "Purging webserver cache"
	        exec_cmd "rm -rf \$PS_CFG_HOME/webserv/$dom/applications/peoplesoft/PORTAL*/*/cache*/"
                echo "Starting webserver"
                exec_cmd "psadmin -w start -d $dom"
            ;;
        esac
    done
}

function print_action_info
{
    echo ""	
    echo "$(echo_color "+--------------------------------------------------------------------+" "brown")"	
    echo "  $(echo_color "Action:" "brown") $(echo_color "$act" "lred") | $(echo_color "Type:" "brown") $(echo_color "$act_type" "lcyan") | $(echo_color "Domain:" "brown") $(echo_color "$dom" "lgreen")"			
    echo "$(echo_color "+--------------------------------------------------------------------+" "brown")"	
    echo ""
}

###########################
### Menus   
###########################

function print_header
{
    clear
    echo "+-------------------------------------------------+" 
    echo "| $(echo_color $title "lblue")   host: $(echo_color $host "lgreen") "	
    echo "+-------------------------------------------------+"
}

function print_help
{
    echo " "
    echo ". help ......................."
    echo ". There is no menu currently, just command line"
    echo ". example: psadmin-plus [action] [type] [domain]"
    echo ". "
    echo ". actions ...................."
    echo ". summary - PS_CFG_HOME summary, no type or domain needed"
    echo ". status - status of the domain"
    echo ". start - start the domain"
    echo ". stop - stop the domain"
    echo ". restart - stop and start the domain"
    echo ". purge - clear domain cache"
    echo ". bounce - stop, flush, purge, configure and start the domain"
    echo ". kill - force stop the domain"
    echo ". configure - configure the domain"
    echo ". flush - clear domain IPC"
    echo ". "
    echo ". types ......................"
    echo ". app"
    echo ". prcs"
    echo ". web"
    echo ". all"
    echo ". "
    echo ". domains....................."
    echo ". domain name"
    echo ". all"

    read -rsp $'\nPress any key to run psadmin...\n' -n1 key_ 
}

# display text in colors
function echo_color
{
    text=$1
    color=$2
	
    case $color in
        red) code="0;31m" ;;
        green) code="0;32m" ;;
        brown) code="0;33m" ;;
        blue) code="0;34m" ;;
        purple) code="0;35m" ;;
        cyan) code="0;36m" ;;
        gray) code="1;30m" ;;
        lred) code="1;31m" ;;
        lgreen) code="1;32m" ;;	
        yellow) code="1;33m" ;;
        lblue) code="1;34m" ;;
        lpurple) code="1;35m" ;;
        lcyan) code="1;36m" ;;
        lgray) code="0;37m" ;;
        *) code="0m" ;;
    esac
    
    echo -e "\e[$code$text\e[0m"
}

###########################
### Misc   
###########################

function set_domains
{	
    web_dirs=($PS_CFG_HOME/webserv/*)
    app_dirs=($PS_CFG_HOME/appserv/*)
    prcs_dirs=($PS_CFG_HOME/appserv/prcs/*)
	
    web_doms=()
    shopt -s nullglob # handles empty dirs
    for dir in "${web_dirs[@]}"
    do
        if [ -d "$dir" ]
        then
            dirname=${dir##*/} # strip fullpath
            if [[ "$dirname" != "Search" && "$dirname" != "prcs" ]]
	    then
                web_doms+=($dirname) 
            fi
        fi
    done
	
    app_doms=()
    shopt -s nullglob # handles empty dirs
    for dir in "${app_dirs[@]}"
    do
        if [ -d "$dir" ]
        then
            dirname=${dir##*/} # strip fullpath
            if [[ "$dirname" != "Search" && "$dirname" != "prcs" ]]
	    then
                app_doms+=($dirname) 
            fi
        fi
    done
	
    prcs_doms=()
    shopt -s nullglob # handles empty dirs
    for dir in "${prcs_dirs[@]}"
    do
        if [ -d "$dir" ]
        then
            dirname=${dir##*/} # strip fullpath
            if [[ "$dirname" != "Search" && "$dirname" != "prcs" ]]
	    then
               prcs_doms+=($dirname) 
            fi
        fi
    done
}

function call_summary
{ 
    clear
    exec_cmd "psadmin -envsummary"
    read -rsp $'\nPress any key...\n' -n1 key
}

function call_psadmin
{ 
	clear
	echo " Running psadmin as $PS_RUNTIME_USER ..."
	exec_cmd "psadmin"	
}

function set_runtime_user
{
	if [ -z $PS_RUNTIME_USER ] ; then
		echo "Environment variable PS_RUNTIME_USER is not set. Using 'psadm2'."
		PS_RUNTIME_USER="psadm2"
	fi
}

function exec_cmd
{
	cmd=$1
	if [ "$USER" = "$PS_RUNTIME_USER" ]; then
		$cmd	
	else
		sudo su - $PS_RUNTIME_USER -c "$cmd"
	fi
}

function type_param
{
    case $1 in
        -a    ) type=app;;
        --app ) type=app;;
        -p    ) type=prcs;;
        --prcs) type=prcs;;
        -w    ) type=web;;
        --web ) type=web;;
        -A    ) type=all;;
        --all ) type=all;;
        *     ) type=$1;;
    esac
}

###########################
### Main 
###########################
act=$1
typeparam=$2
domparam=$3

title=psadmin-plus
host=$(hostname)

#validate_vars
type_param $typeparam
set_runtime_user

# if no action set, run menu
if [ -z "$act" ]
then
	print_header
	print_help
	call_psadmin
else	
    if [ $act = "summary" ]; then
        call_summary
    else
        set_domains
        case $type in
            app ) action_app;;
            prcs ) action_prcs;;
            web )  action_web;;
            all )  action_app; action_prcs; action_web;;
            * ) echo "invalid type!";;
        esac
    fi
fi
